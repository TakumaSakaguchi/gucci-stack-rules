---
description: 
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# Next.js アプリケーション開発ガイドライン

## プロジェクト構造

```
src/
├── app/                    # App Routerのルーティング
│   ├── (auth)/            # 認証関連のルート
│   ├── (private)/         # 認証が必要なルート
│   └── (public)/          # 公開ルート
├── components/            # 再利用可能なコンポーネント
│   ├── auth/             # 認証関連コンポーネント
│   └── layouts/          # レイアウトコンポーネント
├── lib/                  # ユーティリティ関数とライブラリ
│   ├── actions/          # Server Actions
│   └── supabase.ts       # Supabaseクライアント
├── types/                # TypeScript型定義
└── validations/          # バリデーションスキーマ
```

## ベストプラクティス

### 1. ルーティングとレイアウト

- App Routerを使用し、適切なディレクトリ構造を維持する
- 認証状態に応じてルートをグループ化（(auth), (private), (public)）
- 共通レイアウトは`layout.tsx`で管理
- メタデータは各ページで適切に設定

### 2. コンポーネント設計

#### Server Components
- デフォルトでServer Componentsを使用
- データフェッチングを含むコンポーネントはServer Componentsで実装
- SEO対応が必要なコンポーネントはServer Componentsで実装

#### Client Components
以下の場合のみClient Componentsを使用:
- ブラウザAPIを使用する場合
- イベントリスナーが必要な場合
- React hooksを使用する場合
- クライアントサイドの状態管理が必要な場合

### 3. データ管理と認証

#### Supabase認証
- Supabase Authを使用した認証管理
- ミドルウェアによるルート保護
- 環境変数の適切な管理
- CSRF対策の実装

#### Server Actions
- フォーム送信やデータ更新にはServer Actionsを優先的に使用
- クライアントコンポーネントからServer Actionsを呼び出す
- 'use server'ディレクティブを使用してServer Actionsを定義
- 適切なエラーハンドリングを実装

#### データフェッチング
- Server Componentsでのデータフェッチを優先
- 適切なキャッシュ戦略の実装
- エラーハンドリングとバリデーション

### 4. パフォーマンス最適化

#### 画像最適化
- next/imageコンポーネントを使用
- 適切なサイズとフォーマットの指定
- 優先度の高い画像にはpriority属性を設定

#### スクリプト最適化
- next/scriptを使用して外部スクリプトを最適化
- 適切なロード戦略の選択（lazyOnload等）

### 5. エラーハンドリング

- `error.tsx`ファイルでエラーをキャッチ
- `loading.tsx`でローディング状態を管理
- Suspenseを使用して細かい粒度でローディングを制御
- 適切なエラーメッセージとユーザーフィードバック

### 6. 型安全性

- TypeScriptの厳格な型チェックを有効化
- 適切な型定義の作成と管理
- 型の再利用性を考慮

### 7. セキュリティ

- 環境変数の適切な管理（`.env`ファイル）
- 公開環境変数は`NEXT_PUBLIC_`プレフィックスを使用
- CSPヘッダーの適切な設定
- 入力値のバリデーション（特にサーバーサイド）

### 8. デプロイメント

- 本番環境では本番ビルドを使用
- 環境ごとの適切な環境変数設定
- パフォーマンスモニタリングの実装
- エラーログの監視

## 推奨パッケージ

- `@supabase/supabase-js`: Supabaseクライアント

## 開発フロー

1. 機能要件の定義
2. データモデルの設計
3. UI/UXの設計
4. コンポーネントの実装
5. データ処理の実装
6. テストの作成
7. コードレビュー
8. デプロイ

## 注意事項

- セキュリティを常に意識
- パフォーマンスを定期的に計測
- アクセシビリティを考慮
- エラーハンドリングを適切に実装
- ドキュメントの整備